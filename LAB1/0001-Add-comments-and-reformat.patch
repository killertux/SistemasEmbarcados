From 1edbc3711cd05de7be6606f36d8f171b529dbba4 Mon Sep 17 00:00:00 2001
From: lucas-amin <lucas_amin_2@Hotmail.com>
Date: Mon, 9 Apr 2018 22:05:38 -0300
Subject: [PATCH] Add comments and reformat

---
 LAB1/ProjectFiles/Decode.c          | 48 +++++++++++++------------
 LAB1/ProjectFiles/Decode.h          |  1 +
 LAB1/ProjectFiles/IsPrime.c         | 61 +++++++++++++++++---------------
 LAB1/ProjectFiles/IsPrime.h         |  1 +
 LAB1/ProjectFiles/KeyGenerator.c    | 38 ++++++++++----------
 LAB1/ProjectFiles/KeyGenerator.h    |  1 +
 LAB1/ProjectFiles/TestLast.c        | 70 +++++++++++++++++++------------------
 LAB1/ProjectFiles/TestLast.h        |  1 +
 LAB1/ProjectFiles/TestPenultimate.c | 62 ++++++++++++++++----------------
 LAB1/ProjectFiles/TestPenultimate.h |  1 +
 10 files changed, 148 insertions(+), 136 deletions(-)

diff --git a/LAB1/ProjectFiles/Decode.c b/LAB1/ProjectFiles/Decode.c
index af7ade3..a1098dc 100644
--- a/LAB1/ProjectFiles/Decode.c
+++ b/LAB1/ProjectFiles/Decode.c
@@ -8,28 +8,30 @@
 osThreadId tid_Decode;                            // thread id
 osThreadDef (decode, osPriorityNormal, 1, 0);
 
-int init_decode()
-{
-	tid_Decode = osThreadCreate (osThread(decode), NULL);
-  if (!tid_Decode) return(-1);
-	return 0;
+int init_decode() {
+    tid_Decode = osThreadCreate(osThread(decode), NULL);
+    if (!tid_Decode) return (-1);
+    return 0;
 }
-void decode()
-{
-	int i;
-	while(1) {
-		while(!f_decode) {
-			osThreadYield();
-		}
-		f_decode = false;
-		
-		for(i = 0; i < 35; i++) {
-			uint32_t word = getWord(msg + i*4);
-			decoded_msg[i] = (unsigned char)((i & 0x1) ? word + key : word - key);
-		}
-		
-		f_test_last = true;
-		f_test_penultimate = true;
-		osThreadYield();
-	}
+
+void decode() {
+    int i;
+    while (1) {
+        // Awaits until there is an new ke to decode the message
+        while (!f_decode) {
+            osThreadYield();
+        }
+        f_decode = false;
+
+        // Decode the message, adding or subtracting, depending on the word index parity
+        for (i = 0; i < 35; i++) {
+            uint32_t word = getWord(msg + i * 4);
+            decoded_msg[i] = (unsigned char) ((i & 0x1) ? word + key : word - key);
+        }
+
+        // Sets the two tests flags as true, indicating they can be executed now.
+        f_test_last = true;
+        f_test_penultimate = true;
+        osThreadYield();
+    }
 }
\ No newline at end of file
diff --git a/LAB1/ProjectFiles/Decode.h b/LAB1/ProjectFiles/Decode.h
index ad39e43..6c38ecf 100644
--- a/LAB1/ProjectFiles/Decode.h
+++ b/LAB1/ProjectFiles/Decode.h
@@ -2,6 +2,7 @@
 #define DECODE_H
 
 int init_decode();
+
 void decode();
 
 #endif
\ No newline at end of file
diff --git a/LAB1/ProjectFiles/IsPrime.c b/LAB1/ProjectFiles/IsPrime.c
index 201df38..e49d5c4 100644
--- a/LAB1/ProjectFiles/IsPrime.c
+++ b/LAB1/ProjectFiles/IsPrime.c
@@ -6,35 +6,38 @@
 osThreadId tid_Is_Prime;                            // thread id
 osThreadDef (is_prime, osPriorityNormal, 1, 0);
 
-int init_isPrime()
-{
-	tid_Is_Prime = osThreadCreate (osThread(is_prime), NULL);
-  if (!tid_Is_Prime) return(-1);
-	return 0;
+int init_isPrime() {
+    tid_Is_Prime = osThreadCreate(osThread(is_prime), NULL);
+    if (!tid_Is_Prime) return (-1);
+    return 0;
 }
 
-void is_prime()
-{
-		uint32_t endPoint = (uint32_t) sqrt(key);
-		uint32_t i = 3;
-		bool prime;
-	
-		while(1) {
-			 while (!f_prime) {
-				 osThreadYield();
-			 }
-			 f_prime = false;
-			 prime  = true;
-			 for(i = 3; i < endPoint; i+= 2) {
-					 if (key % i == 0) {
-						 prime = false;
-						 f_generate = true;
-						 osThreadYield();
-						 break;
-					 }
-			 }
-			 if(prime)
-					f_decode = true;
-			 osThreadYield();
-	 }
+void is_prime() {
+    uint32_t endPoint = (uint32_t) sqrt(key);
+    uint32_t i = 3;
+    bool prime;
+
+    while (1) {
+        // Awaits until there is a new key to be tested as prime
+        while (!f_prime) {
+            osThreadYield();
+        }
+
+        f_prime = false;
+        prime = true;
+        // Checks every number for plain division, until the input's square root
+        for (i = 3; i < endPoint; i += 2) {
+            if (key % i == 0) {
+                prime = false;
+                f_generate = true;
+                osThreadYield();
+                break;
+            }
+        }
+
+        // Sets the decode flag
+        if (prime)
+            f_decode = true;
+        osThreadYield();
+    }
 }
diff --git a/LAB1/ProjectFiles/IsPrime.h b/LAB1/ProjectFiles/IsPrime.h
index 6dd00d2..bacb64e 100644
--- a/LAB1/ProjectFiles/IsPrime.h
+++ b/LAB1/ProjectFiles/IsPrime.h
@@ -2,6 +2,7 @@
 #define IS_PRIME_H
 
 void is_prime();
+
 int init_isPrime();
 
 #endif
diff --git a/LAB1/ProjectFiles/KeyGenerator.c b/LAB1/ProjectFiles/KeyGenerator.c
index 864e439..5ff7cd2 100644
--- a/LAB1/ProjectFiles/KeyGenerator.c
+++ b/LAB1/ProjectFiles/KeyGenerator.c
@@ -6,27 +6,25 @@
 osThreadId tid_KeyGenerator;                            // thread id
 osThreadDef (key_generator, osPriorityNormal, 1, 0);
 
-int init_key_generator()
-{
-	tid_KeyGenerator = osThreadCreate (osThread(key_generator), NULL);
-  if (!tid_KeyGenerator) return(-1);
-	return 0;
+int init_key_generator() {
+    tid_KeyGenerator = osThreadCreate(osThread(key_generator), NULL);
+    if (!tid_KeyGenerator) return (-1);
+    return 0;
 }
 
-//&& ((passed_last == 1 || passed_last_await == 1)
-//			|| (passed_penultimate == 1 || passed_penultimate_await == 1))
-void key_generator()
-{
-	key = (getWord(msg) - 0xff) | 0x01;
-	last_key = key;
-	while(1) {
-		while(!f_generate) {
-				osThreadYield();
-			}
-		f_generate = false;
+void key_generator() {
+    key = (getWord(msg) - 0xff) | 0x01;
+    last_key = key;
 
-		key +=2;
-		f_prime = 1;
-		osThreadYield();
-	}
+    while (1) {
+        // Awaits until the next key must be generated
+        while (!f_generate) {
+            osThreadYield();
+        }
+        f_generate = false;
+
+        key += 2;
+        f_prime = 1;
+        osThreadYield();
+    }
 }
diff --git a/LAB1/ProjectFiles/KeyGenerator.h b/LAB1/ProjectFiles/KeyGenerator.h
index 4601e0b..b33977d 100644
--- a/LAB1/ProjectFiles/KeyGenerator.h
+++ b/LAB1/ProjectFiles/KeyGenerator.h
@@ -2,6 +2,7 @@
 #define KEY_GENERATOR_H
 
 void key_generator();
+
 int init_key_generator();
 
 #endif
diff --git a/LAB1/ProjectFiles/TestLast.c b/LAB1/ProjectFiles/TestLast.c
index b5a2972..c133276 100644
--- a/LAB1/ProjectFiles/TestLast.c
+++ b/LAB1/ProjectFiles/TestLast.c
@@ -7,40 +7,42 @@
 osThreadId tid_last;                            // thread id
 osThreadDef (test_last, osPriorityNormal, 1, 0);
 
-int init_test_last()
-{
-	tid_last = osThreadCreate (osThread(test_last), NULL);
-  if (!tid_last) return(-1);
-	return 0;
+int init_test_last() {
+    tid_last = osThreadCreate(osThread(test_last), NULL);
+    if (!tid_last) return (-1);
+    return 0;
 }
 
-void test_last () 
-{
-	uint32_t last_word;
-	while(1) {
-		while(!f_test_last) {
-			osThreadYield();
-		}
-		f_test_last = false;
-		last_word = getWord(msg + 34*4) + key ;
-		
-		#ifdef GANTT
-				{
-					int i = 0;
-					for(i = 0 ; i < 50000; i++);
-				}
-		#endif
-		
-		if (((key * key) / last_key) == last_word) {
-			passed_last = true;
-		} else {
-			passed_last = false;
-		}
-		
-		last_key = key;
-		
-		f_finished_test_last = true;
-		
-		osThreadYield();
-	}
+void test_last() {
+    uint32_t last_word;
+    while (1) {
+        // Check the flag defined by decode thread.
+        while (!f_test_last) {
+            osThreadYield();
+        }
+        f_test_last = false;
+        last_word = getWord(msg + 34 * 4) + key;
+
+        // Several operations, used to show parallel behavior at GANTT diagram.
+#ifdef GANTT
+        {
+            int i = 0;
+            for(i = 0 ; i < 50000; i++);
+        }
+#endif
+
+        // Last word test
+        if (((key * key) / last_key) == last_word) {
+            passed_last = true;
+        } else {
+            passed_last = false;
+        }
+
+        // Stores the last key to use on the next testLast execution
+        last_key = key;
+
+        // Sets its finished flag
+        f_finished_test_last = true;
+        osThreadYield();
+    }
 }
\ No newline at end of file
diff --git a/LAB1/ProjectFiles/TestLast.h b/LAB1/ProjectFiles/TestLast.h
index 7a5110b..ccf53b2 100644
--- a/LAB1/ProjectFiles/TestLast.h
+++ b/LAB1/ProjectFiles/TestLast.h
@@ -2,6 +2,7 @@
 #define TEST_LAST_H
 
 void test_last();
+
 int init_test_last();
 
 #endif
diff --git a/LAB1/ProjectFiles/TestPenultimate.c b/LAB1/ProjectFiles/TestPenultimate.c
index d2b1426..8df1506 100644
--- a/LAB1/ProjectFiles/TestPenultimate.c
+++ b/LAB1/ProjectFiles/TestPenultimate.c
@@ -6,37 +6,39 @@
 osThreadId tid_pen;                            // thread id
 osThreadDef (test_penultimate, osPriorityNormal, 1, 0);
 
-int init_test_penultimate()
-{
-	tid_pen = osThreadCreate (osThread(test_penultimate), NULL);
-  if (!tid_pen) return(-1);
-	return 0;
+int init_test_penultimate() {
+    tid_pen = osThreadCreate(osThread(test_penultimate), NULL);
+    if (!tid_pen) return (-1);
+    return 0;
 }
 
-void test_penultimate() 
-{
-	uint32_t penultimate_word;
-	while (1) {
-		while(!f_test_penultimate) {
-			osThreadYield();
-		}
-		f_test_penultimate = false;
-		penultimate_word = getWord(msg + 33*4) - key;
-		
-		#ifdef GANTT
-				{
-					int i = 0;
-					for(i = 0 ; i < 50000; i++);
-				}
-		#endif
-		
-		if ((key / 2) == penultimate_word) {
-			passed_penultimate = true;
-		} else {
-			passed_penultimate = false;
-		}
+void test_penultimate() {
+    uint32_t penultimate_word;
+    while (1) {
+        // Check the flag defined by decode thread.
+        while (!f_test_penultimate) {
+            osThreadYield();
+        }
 
-		f_finished_test_penultimate = true;
-		osThreadYield();
-	}
+        f_test_penultimate = false;
+        penultimate_word = getWord(msg + 33 * 4) - key;
+
+        // Several operations, used to show parallel behavior at GANTT diagram.
+#ifdef GANTT
+        {
+            int i = 0;
+            for(i = 0 ; i < 50000; i++);
+        }
+#endif
+
+        if ((key / 2) == penultimate_word) {
+            passed_penultimate = true;
+        } else {
+            passed_penultimate = false;
+        }
+
+        // Sets its finished flag
+        f_finished_test_penultimate = true;
+        osThreadYield();
+    }
 }
\ No newline at end of file
diff --git a/LAB1/ProjectFiles/TestPenultimate.h b/LAB1/ProjectFiles/TestPenultimate.h
index 8069253..2a18365 100644
--- a/LAB1/ProjectFiles/TestPenultimate.h
+++ b/LAB1/ProjectFiles/TestPenultimate.h
@@ -2,6 +2,7 @@
 #define TEST_PENULTIMATE_H
 
 void test_penultimate();
+
 int init_test_penultimate();
 
 #endif
-- 
2.16.2.windows.1

